####################

```
evince `find *pdf -mtime -0.5 -print`
```

the above is general syntax to send the output of one process as command line
arguments to another process.  for instance, the above command finds all pdfs
in your current directory that have been modified in the past half-day, prints
their names as output, and then sends those as command line arguments to
evince.

```
chmod 755 `ls -d */`

```
changes permissions of all top-level directories in this folder (ls -d lists them)


####################

to send an ssh shell to the background:

key-stroke sequence:

  ENTER + ~ + Ctrl + Z

the first two are ways to avoid the ssh client trapping the keystrokes

####################

scripting cheatsheet:

https://devhints.io/bash

for i in {1..5}; do echo $i; done

for i in /etc/rc.*; do
  echo $i
done

e.g., a nice one-liner to count stars in source extraction files.

` for i in *.fistar; do sed -e '/^#/d' $i | wc -l | tee -a count_stars.txt; done `

where the regex:
^ := asserts position at start of line

####################

Baby's first read script:

blah=`ls *'.txt'`

cat $blah | while read thisline; do
  echo $thisline
done |
programactsonlines

####################

Needing to remove shiloads of files: xargs lets you execute non-bashbuiltins
(echo is a built, rm is not)

` echo *.grcollectilc | xargs rm `


####################

Counting number of files in directory when list is long. Note: piping has no maximum file length limit.

` find -type f -name '*.fits' | wc -l `
(not this is nicer than xarg.  and if you do a path like '*/*.fits', use the -wholename option instead)

find . -wholename "./cam?_ccd?/hlsp*.fits" | wc -l

####################

Get random file from directory

ls | sort -R | head -n1
