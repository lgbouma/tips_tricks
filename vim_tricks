####################

From terminal:
>>> vi -p *py

####################
`:bro[wse] ol[dfiles]`
lets you look through recent files you've worked with.

`:help encryption`

####################
On buffers vs tabs:

They are similar. Tabs were only implemented in vim7. `tabe <path>` opens
<path> in a tab. Then something like:
map <F8> :tabn<CR>
map <F7> :tabp<CR>
Maps F7 and F8 to tab switching.

You can do similar things with buffers though.
From bash, `vi *py` opens all python files in working directory in buffers, and
`:e <path>` does the same as `tabe <path>` but for buffers.
`:ls` then lists everything in your buffers. `:bn` and `:bp` go to next and
previous.

This is OK, but right -- you can forget whatever you had in your buffers.

Also, opening things as tabs automatically opens them in buffers too.

####################

You can back out of insert mode with <ctrl+C> rather than <Esc>. (although this
is a bit useless b/c it doesn't work the same way when combining operators)

####################
`set textwidth=70` makes for happy git commits.

####################
For split windows and things:

`ctrl+w, s` horizontally splits screen. So does `:split`.
`ctrl+w, v` horizontally splits screen. So does `:vsplit`.
Then `ctrl+w, <arrow key>` lets you move around.

Better:

`ctrl+w ctrl-w`: cycle through windows.

`:hide` hide this window

`:only` close all other windows but this window

It kind of becomes a mess with tabs too though. My preference is for just many
tabs, and leafing through them, above split screens.

####################

ALIGNING TEXT:

visual mode, make selection, `gq`. --> will textwrap etc for you. Great for
worry-free editting of big paragraphs, and whenever textwrap fails (e.g., on
wonky filetypes)

####################

To shift back to shell, if you so desire:
`ctrl+Z`

then you're in shell, and vim is in bkgnd.

Then `fg` from shell and you're back.

####################

`:terminal` opens a terminal in this window.

This is pretty great because it turns vim into a more IDE-like environment.

For instance, when developing, it can be nice to create a binding that splits
your current screen vertically, then gives you a terminal in one window:

`ctrl+w, v`
`ctrl+w, ctrl+w`
`:terminal`

####################

if you've set up say jedi-vim to get documentation for whatever libraries you
use, then it can be nice to move windows around with:

`ctrl+w, L/H`

where `H` moves it to the left, `L` to the right.


####################
Jumping to previously visited locations

http://vim.wikia.com/wiki/Jumping_to_previously_visited_locations

Ctrl-O jumps back to the previous (older) location
Ctrl-I jumps forward to the next (newer) location.

Combining with MARKS, (`m -> a` to mark as "a", then `'a` to jump back to that
line), this eases navigation around a text file by a lot.
